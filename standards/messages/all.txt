Messages between any two parties of the network


Wallet & Wallet			Wallet & IS						Wallet & DSDB

=============			=====================			=================
= BLANK		=			= MINTING_KEY		=			= LOCK_COINS	=
= COINS		=			= MINT				=			= UNLOCK_COINS	=
=============			= FETCH_MINTED		=			=================
						= DSDB_KEY			=
						= REDEEM_COINS		=
						=====================

============================================================================


********************
* Wallet to Wallet *
********************

=============
= BLANK		=
= COINS		=
=============

BLANK
-----

A:
  BLANK_PRESENT	#hex_string(number_of_blanks)
				blank1
				blank2

B:
  BLANK_FAILURE	#hex_string(number_of_failures)
				#base64(encrypted serial of blank1) "Reason1"
				#base64(encrypted serial of blank2) "Reason2"
					Reasons:
						Malformed blank
						Unknown issuer
							Note: Also used for an untrusted issuer
						
  BLANK_FAILURE	#hex_string(0) "reason"
					Reason:
						Cancelled
						

  BLANK_REJECT	#hex_string(number_of_failures)
				#base64(encrypted serial of blank1) "Reason1"
				#base64(encrypted serial of blank2) "Reason2"
					Reasons:
						DSDB: Key ID of DSDB is unknown or expired		Permanant
						DSDB: Key ID of blank is unknown or expired		Permanant
						DSDB: Decryption of serial failed				Permanant
						DSDB: Serial already redeemed					Permanant
						DSDB: Serial locked (not spent)					Temporary

  BLANK_REJECT	#hex_string(0) "reason"
					Reasons:
						Cancelled

  BLANK_ACCEPT
	 Note: After ACCEPT, a REJECT #hex_string(0) can be given to abort the transaction



COINS
-----

A:
  COINS_REDEEM	#hex_string(number_of)
				#base64(coin1)
				#base64(coin2)

B:
  COINS_REJECT	#hex_string(number_of)
				#base64(coin1) "Reason1"
				#base64(coin2) "Reason2"
					Reasons:
						Invalid coin
						Unknown coin
							Note: Used when the coin we are given is different than the blank

  COINS_REJECT	#hex_string(0) "Reason"
					Reasons:
						*I can't think of anything valid*

  COINS_ACCEPT


============================================================================


****************
* Wallet to IS *
****************

=====================
= MINTING_KEY		=
= MINT				=
= FETCH_MINTED		=
= DSDB_KEY			=
= REDEEM_COINS		=
=====================

MINTING_KEY
-----------

Wallet:
  MINTING_KEY_FETCH_DENOMINATION	#string(denomination)
  MINTING_KEY_FETCH_KEYID	#hexstring(key_id)}

IS:
  MINTING_KEY_PASS	keycertificate
  MINTING_KEY_FAILURE	"Reason"
						Reasons:
							Unknown denomination
							Unknown key_id
  


MINT
----

Wallet:
  MINT_REQUEST	#base64(request_id) #hex_string(number_of_blinds) 
				#key_id(blind1) #base64(blind1)
				#key_id(blind2) #base64(blind2)

IS:
  MINT_REJECT	#hex_string(number_of_rejected_blinds)
				#key_id(blind1) "Reason1"
				#key_id(blind2) "Reason2"
					Reasons:
						Unknown key_id
						Unable to blind
							Question: if the IS doesn't have the minting key, use a similar key to test?

  MINT_ACCEPT	#base64(request_id)



FETCH_MINTED
------------

Wallet:
  FETCH_MINTED_REQUEST	#base64(request_id)


IS:
  FETCH_MINTED_FAILURE	#base64(request_id) "Reason"
							Reasons:
								Request not credited
									Note: this message may be a temporary failure (FETCH_MINTED_WAIT)
								Unknown request_id
								Unable to blind (note: redundant? maybe not for all signatures)
								
  FETCH_MINTED_WAIT	#base64(request_id) "Reason"
							Reasons:
								Not yet minted
								Request not credited
									Note: this message may be a permanant failure (FETCH_MINTED_FAILURE)
  
  FETCH_MINTED_ACCEPT	#base64(request_id) #hex_string(number_of_blinds)
						#base64(signature_of_blind1)
						#base64(signature_of_blind2)



DSDB_KEY
--------------

Wallet:
  DSDB_KEY_REQUEST

IS:
  DSDB_KEY_PASS	keycertificate



REDEEM_COINS
------------

Wallet:
  REDEEM_COINS_REQUEST	#hex_string(transaction_id) "#string(target)" #hex_string(number_of_coins)
						#base64(coin1)
						#base64(coin2)
							Targets:
								Strings which refer to a specific target for the redeeming of the coins.
								i.e. an account somewhere, a request for more coins, etc.
								The only required defined target is for another transaction to the mint.
									MINT_REQUEST=#string(request_id)
IS:
  REDEEM_COINS_REJECT	#hex_string(number_of_coins)
						#base64(coin1) "Reason1"
						#base64(coin2) "Reason2"
							Reasons:
								Unknown key_id
								Coin expired
								Coin already redeemed
								Invalid coin
								Unknown target
									Note: Can be used if Mint requires request_id to already be awaiting minting

  REDEEM_COINS_ACCEPT


============================================================================


******************
* Wallet to DSDB *
******************

=================
= LOCK_COINS	=
= UNLOCK_COINS	=
=================

LOCK_COINS
----------

Wallet:
  LOCK_COINS_REQUEST	#key_id_of_DSDB #hex_string(transaction_id) #hex_string(#number_of_obfuscated_blanks)
						#key_identifier1 #encrypted_serial1
						#key_identifier2 #encrypted_serial2

DSDB:
  LOCK_COINS_ACCEPT		#hex_string(transaction_id) TIME(lock_expires)

  LOCK_COINS_FAILURE	#hex_sting(transaction_id) #hex_string(number_of_failures)
						#key_identifier1 #encrypted_serial1 "Reason 1"
						#key_identifier2 #encrypted_serial2 "Reason 2"
							Reasons:
								Key ID of DSDB is unknown or expired		Permanant
								Key ID of blank is unknown or expired		Permanant
								Decryption of serial failed					Permanant
								Serial already redeemed						Permanant
								Serial locked (not spent)					Temporary



UNLOCK_COINS
------------

Wallet:
  UNLOCK_COINS_REQUEST	#hex_string(transaction_id)

DSDB:
  UNLOCK_COINS_PASS
  UNLOCK_COINS_FAILURE	#hex_string(transaction_id) "Reason"
							Reasons:
								Unknown transaction_id
								Transaction already completed
								Lock expired *Not really a failure...*



