OpenCoin 

How the wallet creates a coin and communicates with an issuer
=============================================================
 
#1 issuer setup

* issuer generates master key pair (ALG,pM,sM)

* issuer sets up "currency description document" = CDD (like a root certificate)

   {
     standard version             = http://opencoin.org/OpenCoinProtocol/1.0
     currency identifier          = http://opencent.net/OpenCent
     short currency identifier    = OC 
     issuer service location      = opencoin://issuer.opencent.net:8002
     denominations                = 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000  #list of strings seperated by commas
     issuer cipher suite          = HASH-ALG, SIGN-ALG, BLINDING-ALG
     issuer public master key     = base64(pM)
     
     issuer                       = Hash(pM)
     base64(sig(sM,hash(content part)))
   }

   (question: is the "short currency identifier" needed?)
   (question: "not use after", "random collision free serial"?)
   (future: add additionial signatures, e.g. from wallet software vendors)

* issuer publishes CDD at "currency identifier" URL

* mint (regularily) creates keypairs (p,s) for all denominations and id(p).
  Master key holder generates keys certificate

  {
    key identifier      = base64(id(p))
    currency identifier = http://opencent.net/OpenCent
    denomination        = denomination
    not_before          = TIME(...)
    key_not_after       = TIME(...)
    coin_not_after      = TIME(...)
    public key          = base64(p)

    issuer              = Hash(pM)
    base64(sig(sM, hash(content part)))
  }

  
  Questions:
  * Time format:  YYYYMMDDHHMMSS  20071211144111 or SecondsSinceEpoch or ISO 8601?
  * id() = sha256()?
  * CDD?

* issuer creates DSDB keypair (p,s)

  {
    key identifier   = base64(id(p))
    not_before       = TIME(...)
    not_after        = TIME(...)
    public key       = base64(p)

    issuer           = Hash(pM)
    signature        = base64(sig(sM, hash(content part)))

    signer           = Hash(pM)
    signature        = base64(sig(sM, hash(content part)))
  }   


* issuer fires up issuer service (=IS) at <opencoin://issuer.opencent.net:8002>



#2 wallet setup

* fetch "currency description document" from issuer


#3 wallet creates blanks

* Wallet: fetches current public minting keys for denomination

Wallet:
	MINTING_KEY_FETCH_DENOMINATION(denomination) or MINTING_KEY_FETCH_KEYID(key_id)
IS:
	MINTING_KEY_PASS(keycertificate) or MINTING_KEY_FAILURE(reason)

* Wallet: creates blank according to CDD:

  {
      standard identifier = http://opencoin.org/OpenCoinProtocol/1.0
      currency identifier = http://opencent.net/OpenCent 
      denomination        = denomination
      key identifier      = key_id(signing key)
      serial              = base64(128bit random number)
  }


* Wallet: create random r, calculate 

    blind = blinding(r, pub_minting_key, hash(blank))
 
  Calculate a collision-free random request ID (128 bit)

  Keep (r, blank, blind) in mind. 
  
  
#4 wallet send minting request to issuer  

* Send 

    MINT_REQUEST(request_id, list( (blind1.key_id, blind1), ... ) )

  to issuer service

* Issuer: if key_id is not current:

    MINT_REJECT( list( (blind1.key_id, "Bad Key ID"), ... ) )

  Elif request will not be minted (e.g., payment not yet received):

    MINT_REJECT( list( (blind1.key_id, "Reason1"), ... ) )
  
  Else: IS passes (maybe asynchronous) request to mint and:
    MINT_ACCEPT(request_id)

  Session is terminated.



  Mint processes request (signs blind with key_id)

  Mint passes "signed blind"="blind coin" back to IS 


#5 Wallet gets coin back

* Wallet asks issuer service "fetch_signed_blind request_id"

    FETCH_MINTED_REQUEST(request_id)

* IS either rejects finally or temporarily

    FETCH_MINTED_FAILURE(request_id, "Reason")
    FETCH_MINTED_WAIT(request_id, "Reason")
 
    Possible failures: "Request ID Unknown", "Request ID expired", "Request ID rejected"
    Possible waits:    "Processing request"

  (question: what about key expiration while request is in mining queue)

  or passes signed blinds to wallet Bob, must preserve order

    FETCH_MINTED_ACCEPT(request_id, list(signature_of_blind1, ...) )
	
  Session terminates

* wallet checks if blind fits request id and if blind was correctly signed. 
  If not, delete blind and inform user (optional: inform issuer about error)
  (optional: if yes, inform issuer that he may delete the request)

* Wallet unblinds signed blind and yields coin  (or reblinds)


#6 Wallet to Wallet

Alice - sends a coin
Bob - receives the coin

* Prerequisites:
  * Wallet Alice locates Wallet Bob and sets up (secure) connection
  * Alice knows how much to send and tells her Wallet
  * Wallet Alice calculates a splitting of sum into coins (units) and
    creates a list of coins to send
  * Wallet Alice and Wallet Bob are synchronized to UTC (within some small margin of error)

* Alice fetches DSDB key at IS

    DSDB_KEY_REQUEST
    DSDB_KEY_PASS(keycertificate)

* Wallet Alice sends obfuscated blanks (coins without signature and with serial
  encrypted for DSDB) with the serial to Wallet Bob (Wallet Alice now needs to wait a while)

  {
      standard identifier = http://opencoin.org/OpenCoinProtocol/1.0
      currency identifier = http://opencent.net/OpenCent 
      denomination        = denomination
      key identifier      = key_id(signing key)
      serial              = base64(encrypt(ALG,pub-key-of-DSDB, serial))
  }

     BLANK_PRESENT( list(blank1, blank2, ...) )

* Wallet Bob check:

  * Wallet Bob validates the blanks
    - do we have the "currency description document"
    - do we trust the issuer (do we have a valid public key)
    - checks blanks against cdd

  * If blanks are invalid, the transfer is declined by Wallet Bob
    (later: cdd transfer between wallets)

  * Wallet Bob shows proposed transfer to Bob

  * Bob decides whether to 
    - accept transfer
    - accept transfer without double spending checking
    - decline transfer

      BLANK_REJECT( list( (encrypted_serial_blank1, "Reason1"), ... ) )
      BLANK_REJECT( emptylist, "Reason")

  (Todo: Add reasons)

if DSDB is required (normal case):

    * Wallet Bob prepares for coin exchange with IS, by creating blanks of same sum (see #3)

    * Wallet Bob DSDB lookup
      - parse cdd for issuer service location
      - parse blanks for necessary minting key ids
      - start session with authenticated issuer service (IS) (secured and authenticated by transport layer, e.g. SSL)
        - create transaction id (two-party secret agreement (collision free))
          Possible example with https.
            USE_HTTPS_SESSIONID
            YES|NO
        - get all missing minting key certs (MINTING_KEY_FETCH_KEYID)
        - IS sends key certs or rejects a key id (unknown, outdated) (MINTING_KEY_PASS/FAIL_MINTING_KEY_FAILURE)
        - lock list of encrypted coin serial numbers at IS (DSDB) 
            LOCK_COINS_REQUEST( DSDB_key_key_id, transaction_id,
								list( (key_identifier1, encrypted_serial1), ... ) )

        - IS either accepts with locking time or rejects with list of rejected serials + reason (locked, spent) 
            If all coins lock:
               LOCK_COINS_ACCEPT(transaction_id, lock_expires)
            If some coins cannot lock, no coins are locked.
               LOCK_COINS_FAILURE(transaction_id, list( (key_identifier1, encrypted_serial1, "Reason1"), ...))

                     Reasons:
                          
                          Key ID of DSDB is unknown or expired       Permanant
                          Key ID of blank is unknown or expired      Permanant
                          Decryption of serial failed                Permanant
                          Serial already spent                       Permanant
                          Serial locked (not spent)                  Temporary


      (this part pauses, session is kept)

* Wallet Bob tells Wallet Alice accept or reject with reason (unknown, outdated, locked, spent) for each rejected blank
  (if one blank is rejected the whole transfer has to be rejected) (future: bob signs receipt)

      BLANK_FAILURE( list( (encrypted_serial_blank1, "Reason1"), ...))
      BLANK_FAILURE( emptylist, "Reason")

      BLANK_ACCEPT

      Note: After BLANK_ACCEPT, a BLANK_REJECT(emptylist, "Reason) can be given to abort the transaction until
			COINS_SPEND is sent
			
* Wallet Alice sends coins to Wallet Bob (this time including their clear serial and signature)
  
    COINS_SPEND( list(coin1, ...) )

* Wallet Bob checks that the coins match the blanks and that signatures are valid

* Wallet Bob accepts transaction or rejects with reason (unknown, invalid) for each rejected coin

     COINS_REJECT( list( (coin1, "Reason1") ) )
     COINS_REJECT( emptylist, "Reason")

     ACCEPT_COIN

* Wallet Bob terminates session with Wallet Alice

    (in case of rejection Wallet Alice needs to do emergency meassures, quickly trying to exchange coins with IS 
     itself etc.)


if DSDB is required (normal case):
    
    * in case of reject in the checking phase delete the blanks, otherwise
        UNLOCK_COINS_REQUEST(transaction_id)

    * Wallet Bob sends buy request (blanks + coins) (Wallet Bob continues as in #4 and #8)
        (REDEEM_COINS+MINT_REQUEST)

    * IS has to check if sum of blanks and coins are equal


#7 Redeeming Coins 

* Wallet locks serials at IS (see above LOCK_COINS)

* Wallet sends coins + target to IS
  
  - target can be an account
    REDEEM_COINS_REQUEST(transaction_id, target, list(coin1, ...)

    target is of the form:
        MINT_REQUEST=#base64(request_id)
        ONLINE_BANKING_ACCOUNT=#string(account_identifier)
        and so on... to be defined with relationship between IS and individual

* continue with #8

* Send money to target


#8 Accepting coins

* IS checks:
    - if minting keys are still valid
    - if serial is still valid (against DSDB)
    - if signature is valid
    - if target is valid

* IS rejects with reason (key id unknown, coin outdated, coin spent, signature invalid) per coin or 
     REDEEM_COINS_REJECT( list(coin1, ...) )

* (IS tries to service target, rejects with reason if not possible)

* IS enters serials into DSDB

* IS sends accept to Wallet
      REDEEM_COINS_ACCEPT

